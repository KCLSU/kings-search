import { r as registerInstance, h } from './index-65ac344c.js';

const ElectionsCandidates = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**Set to true to display results data. False to display All Candidates */
        this.results = false;
        /** The primary acrtive tab that will be open on page load */
        this.activeid = 'SO';
        this.dataMap = {
            officers: {
                id: 'SO',
                title: 'Student Officers',
                innertabs: this.studentofficers.split('|')
            },
            network: {
                id: 'NO',
                title: 'Network Officers',
                innertabs: this.networkofficers.split('|')
            },
            nus: {
                id: 'NUS',
                title: 'NUS Delegate',
                innertabs: 'NUS National Conference Delegate',
            },
            academic: {
                id: 'ACADEMIC',
                title: 'Academic',
                innertabs: this.academicgroups.split('|')
            }
        };
    }
    componentDidLoad() {
        /** Fetch the data from the database */
        const endpoint = this.results ? 'results' : 'candidates';
        let url = `https://elections-b726c.firebaseio.com/${this.electionid}/${endpoint}.json`;
        fetch(url)
            .then(res => res.json())
            .then(candidateData => {
            this.data = candidateData;
        });
    }
    filterOfficerData(searchTerm, type) {
        return this.data.filter(candidate => candidate[type] === searchTerm.trim());
    }
    filterAcademicData(type) {
        return this.data.filter(candidate => candidate.Post.includes(type.trim()));
    }
    // filterAllOfficers(type: string){
    //     if (this.data) return this.data.filter(candidate => candidate.Type === type)
    // }
    shortenTitle(title, id) {
        /** To be used for the Tab Headings, so a shorter title appears as the heading*/
        if (id === 'SO') {
            if (title.includes('Welfare'))
                title = 'VP Welfare & Community';
            else if (title.includes('Health'))
                title = 'VP Education (Health)';
            else if (title.includes('Postgraduate'))
                title = 'VP Postgraduate';
            else if (title.includes('Arts'))
                title = 'VP Education (Arts & Sciences)';
            else if (title.includes('Activities'))
                title = 'VP Activities & Development';
            else if (title.includes('President'))
                title = 'President';
        }
        else if (id === 'NO') {
            if (title.includes('Generation'))
                title = 'First Generation';
            else if (title.includes('International'))
                title = 'International';
            else if (title.includes('People of Colour'))
                title = 'People of Colour';
            else if (title.includes('Women'))
                title = "Women's";
            else if (title.includes('Family'))
                title = 'Family';
            else if (title.includes('Disabled'))
                title = 'Disabled';
            else if (title.includes('Mature'))
                title = 'Mature';
            else if (title.includes('LGBT+'))
                title = 'LGBT+';
        }
        else if (id === 'ACADEMIC')
            return title;
        else {
            console.log('Unable to shorten title due to incorrect Data Map ID. Title used:' + ' ' + title);
        }
        return title;
    }
    createTabs() {
        //CREATE ARRAY OF FIELDS TO MAP OVER INTO TAB HEADINGS
        const newDataMapArray = [];
        if (this.studentofficers)
            newDataMapArray.push(Object.assign({}, this.dataMap.officers));
        if (this.networkofficers)
            newDataMapArray.push(Object.assign({}, this.dataMap.network));
        if (this.filterOfficerData('NUS National Conference Delegate', 'Post').length > 0)
            newDataMapArray.push(Object.assign({}, this.dataMap.nus));
        if (this.academicgroups)
            newDataMapArray.push(Object.assign({}, this.dataMap.academic));
        return newDataMapArray.map((field, i) => {
            let activeTab = field.id === this.activeid ? true : false;
            return ([
                h("tab-header", { name: field.id + i, active: activeTab, slot: "tab-headers" }, " ", field.title),
                h("tab-content", { name: field.id + i, active: activeTab, slot: "tab-content" }, this.organiseInnerTabs(field))
            ]);
        });
    }
    organiseInnerTabs(field) {
        /** DEPENDING ON FIELD TYPE, CREATE EITHER INNER TABBS CONTAINER OR A CANDIDATE DISPLAY */
        let inner;
        switch (field.id) {
            case 'NUS':
                inner = h("candidate-display", { data: this.filterOfficerData(field.innertabs, 'Post') });
                break;
            case 'SO':
                inner = (h("inner-tabs-container", null, this.createInnerTabs(field.innertabs, field.id)));
                break;
            case 'NO':
                inner = (h("inner-tabs-container", null, this.createInnerTabs(field.innertabs, field.id)));
                break;
            case 'ACADEMIC':
                inner = (h("inner-tabs-container", null, this.createInnerTabs(field.innertabs, field.id)));
                break;
            default: inner = "";
        }
        return inner;
    }
    createInnerTabs(array, typeId) {
        /** THE INNER TABS FOR EACH FIELD WITH AN INNER TABS CONTAINER */
        const ar = array;
        /** IF DISPLAYING RESULTS, AN 'ALL' TAB IS ADDED TO KEEP ALL RELATED ROLES UNDER ONE INNER TAB */
        if (this.results && typeId === 'SO') {
            ar.unshift('All');
        }
        else if (this.results && typeId === 'NO') {
            ar.unshift('All');
        }
        return ar.map((title, i) => {
            let searchField = title;
            if (title === 'All' && typeId === 'SO')
                searchField = 'Officer';
            else if (title === 'All' && typeId === 'NO')
                searchField = 'Network';
            return ([
                h("inner-tab-header", { active: title === 'All' || i === 0, name: typeId + i, slot: "tab-headers" }, " ", this.shortenTitle(title, typeId), " "),
                h("inner-tab-content", { active: title === 'All' || i === 0, name: typeId + i, slot: "tab-content" }, typeId === 'ACADEMIC' ?
                    h("academic-candidate-display", { data: this.filterAcademicData(searchField) })
                    :
                        h("candidate-display", { data: this.filterOfficerData(searchField, title === 'All' ? 'Type' : 'Post') }))
            ]);
        });
    }
    render() {
        if (!this.data)
            return h("div", { style: { "height": "50vh", "position": "relative" } }, h("loading-spinner", null));
        else
            return (h("tabs-container", null, this.createTabs()));
    }
};

export { ElectionsCandidates as elections_candidates };

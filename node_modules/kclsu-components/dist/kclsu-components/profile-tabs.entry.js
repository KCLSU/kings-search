import { r as registerInstance, h } from './index-65ac344c.js';

const profileTabsCss = ".card-layout{display:grid;grid-gap:30px;grid-template-columns:repeat(auto-fit, minmax(260px, 1fr));justify-items:center}@media only screen and (max-width: 1080px){.card-layout{grid-template-columns:repeat(auto-fit, minmax(200px, 1fr))}}@media only screen and (max-width: 780px){.card-layout{grid-gap:20px;grid-template-columns:repeat(auto-fit, minmax(210px, 1fr))}}@media only screen and (min-width: 580px) and (max-width: 780px){.card-layout{grid-template-columns:repeat(auto-fit, minmax(180px, 1fr))}}@media only screen and (max-width: 580px){.card-layout{grid-template-columns:repeat(auto-fit, minmax(190px, 1fr))}}@media only screen and (max-width: 465px){.card-layout{grid-template-columns:repeat(auto-fit, minmax(150px, 1fr))}}@media only screen and (max-width: 435px){.card-layout{grid-template-columns:repeat(auto-fit, minmax(120px, 1fr))}}@media only screen and (max-width: 370px){.card-layout{grid-template-columns:repeat(auto-fit, minmax(200px, 1fr))}}";

const ProfileTabs = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /** Array with child arrays containing Tab Heading, Tab ID, and Text(optional) */
        this.headings = [['First Tab', 'Tab1', 'A maximum of two lines of text can go here. This is meant only as a brief introduction'], ['Second Tab', 'Tab2']];
        /**Specify Tab ID you want to keep open by default */
        this.activeid = 'Tab1';
        this.modalopen = false;
    }
    componentDidLoad() {
        if (this.database) {
            fetch(this.database)
                .then(res => res.json())
                .then(data => this.profiles = data);
        }
    }
    createTabs() {
        let headings = JSON.parse(this.headings);
        return headings.map((ar) => {
            let activeTab = ar[1] === this.activeid ? true : false;
            let description = !ar[2] ? '' : ar[2];
            return ([
                h("tab-header", { name: ar[1], active: activeTab, slot: "tab-headers" }, " ", ar[0]),
                h("tab-content", { name: ar[1], active: activeTab, slot: "tab-content" }, h("p", null, description), h("profile-card-layout", null, this.profiles ? this.mapToCards(this.profiles, ar[1], ar[0]) : ''))
            ]);
        });
    }
    mapToCards(data, filterId, category) {
        let profiles = Object.keys(data).map(key => {
            let ob = data[key];
            ob.key = key;
            return ob;
        });
        return profiles
            .filter(profile => profile.type === filterId)
            .map((profile) => {
            return h("profile-card", { name: profile.name, position: category, emitid: profile.key, image: profile.url, cta: 'learn more', secondcta: 'upcoming', secondlink: profile.upcomingEvent });
        });
    }
    launchBio() {
        return h("full-bio", { data: !this.profiles ? '' : this.profiles[this.activebio] });
    }
    onEmittedClick(event) {
        this.activebio = event.detail;
        this.modalopen = true;
    }
    closeModal() {
        this.modalopen = false;
    }
    render() {
        return ([
            h("kclsu-modal", { show: this.modalopen }, this.modalopen ? this.launchBio() : ''),
            h("tabs-container", null, this.createTabs())
        ]);
    }
};
ProfileTabs.style = profileTabsCss;

export { ProfileTabs as profile_tabs };

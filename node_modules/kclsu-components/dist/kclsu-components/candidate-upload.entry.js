import { r as registerInstance, h } from './index-65ac344c.js';

const CandidateUpload = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.successfulUpload = false;
        this.error = '';
        this.modalOpen = false;
        this.loading = false;
        this.validProps = false;
        // componentDidLoad(){
        //     //IF UNVALID PROPS, SET ERROR 
        //     if (this.validateProps() === false) {
        //         this.error = 'Check component attributes';
        //         this.validProps = false;
        //     }
        // }
        this.candidatesKeysMap = {
            'display_name': 'Name',
            'post_name': 'Post',
            'ManifestoLink': 'ManifestoLink',
            'ImageLink': 'ImageLink',
            'candidate_status': 'Status'
        };
        this.resultsKeysMap = {
            'Name': 'Name',
            'Post': 'Post',
            'ManifestoLink': 'ManifestoLink',
            'ImageLink': 'ImageLink',
            'Type': 'Type',
            'ResultsLink': 'ResultsLink'
        };
    }
    submitJson() {
        //MAKE A REQUEST TO FIREBASE TO UPLOAD DATA
        const baseUrl = 'https://elections-b726c.firebaseio.com';
        let endpoint;
        if (this.stage === 'candidates')
            endpoint = 'candidates';
        else if (this.stage === 'results')
            endpoint = 'results';
        else {
            this.error = 'Incorrect component parameter supplied';
            throw new Error();
        }
        ;
        //FETCH TOKEN FROM LOCAL STORAGE TO MAKE AUTHENTICATED REQUEST
        const token = localStorage.getItem('kclsu_token');
        if (this.spreadsheetdata) {
            let data = JSON.parse(this.spreadsheetdata).map(ob => {
                return this.reBuildObject(this.candidatesKeysMap, ob);
            });
            if (this.stage === 'candidates') {
                //MAKE SURE ONLY APPROVED CANDIDATES ARE IN THE DATA
                data = data.filter(candidate => candidate.Status === 'Approved');
            }
            const body = {
                method: 'PUT',
                body: JSON.stringify(data),
            };
            const url = `${baseUrl}/${this.electionid}/${endpoint}.json?auth=${token}`;
            fetch(url, body)
                .then(res => {
                console.log(res);
                if (!res.ok) {
                    this.loading = false;
                    this.successfulUpload = false;
                    this.error = res.statusText;
                }
                else {
                    this.error = '';
                    this.successfulUpload = true;
                    this.modalOpen = true;
                    this.loading = false;
                }
            })
                .catch(er => {
                this.error = `${er}`;
                this.loading = false;
            });
        }
        else
            this.error = "Failed to map over supplied spreadsheet data";
    }
    reBuildObject(keyMap, obj) {
        //THIS MAPS AN OBJECT AGAINST A SET OF PROPERTIES WE WANT THAT OBJECT TO HAVE
        //THE PROPERTY NAMES IN SPREADHSEET DATA NEED TO BE THE SAME AS THOSE REQUIRED BY CANDIDATE DISPLAY COMPONENTS
        //IT WILL FIND KEYS IN THE KEYMAP, AND RETURN A NEW OBJECT WITH THOSE KEYS 
        return Object.keys(obj).reduce((acc, key) => {
            if (!keyMap[key]) {
                return Object.assign({}, acc);
            }
            else {
                return (Object.assign(Object.assign({}, acc), { [keyMap[key]]: obj[key] }));
            }
        }, {});
    }
    createCards() {
        //CREATES PROFILE CARDS FOR PREVIEW
        const keymap = this.stage === 'candidates' ? this.candidatesKeysMap : this.resultsKeysMap;
        const data = JSON.parse(this.spreadsheetdata).map(ob => {
            return this.reBuildObject(keymap, ob);
        });
        return h("candidate-display", { data: data });
    }
    // validateProps(){
    //     //BE EXTRA CAREFUL OF PROPS SUPPLIED, SO DATA IS NOT UPLOADED TO A RANDOM LOCATION IN DATABASE
    //     let valid = true;
    //     if (/202[0-9]/.test(this.year) === false)  valid = false;
    //     else {
    //         switch(this.season){
    //             case 'Spring':
    //                 valid = true;
    //                 break;
    //             case 'Autumn':
    //                 valid = true;
    //             case 'By' :
    //                 valid= true;
    //                 break;
    //             default : valid = false;
    //         }
    //     }
    //     return valid;
    // }
    uploadClick(e) {
        //LISTEN FOR CLICK TO MAKE REQUEST TO FIREBASE
        if (e.detail === 'upload') {
            this.loading = true;
            this.submitJson();
        }
        //LISTEN FOR CLICK TO CLEAR AN ERROR
        else if (e.detail === 'clear') {
            this.error = null;
        }
    }
    closeModal() {
        //CLOSE MODAL
        this.modalOpen = false;
    }
    render() {
        console.log("SPREADSHEET DATA BEFORE RENDER");
        //SET THE DATABASE NAME AREA FOR AUTHENTICATION
        const database = this.stage === 'candidates' ? 'elections-candidates' : 'elections-results';
        //CREATE THE PROFILE CARDS IF THERE IS DATA
        let previewCards = this.spreadsheetdata ? this.createCards() : h("loading-spinner", { show: true });
        let successfulUploadNotice = ([
            h("kclsu-modal", { show: this.modalOpen }, h("h4", null, "Success! Candidate data uploaded in the cloud")),
            h("h3", { style: { "color": "green" } }, "Upload Completed"),
            h("p", null, h("em", null, "Your work is done!")),
            h("br", null)
        ]);
        let content = (h("div", { class: "upload_container" }, h("user-login", { database: database }), h("h3", null, "Preview of data"), h("p", null, "Below is an unsorted + unfiltered list of profile cards generated from the spreadsheet. ", h("em", null, "Use to do final checks,"), " eg double check links, images etc."), h("p", null, "Once happy click the Upload button below to upload data to database"), h("p", null, "If you do not see a a list of profile cards below, there was an issue with the spreadsheet. Double check all fields are correct by referring to the Website Documentation. "), h("kclsu-button", { emitid: "upload" }, "Upload Data"), h("loading-spinner", { show: this.loading }), this.successfulUpload && successfulUploadNotice, !this.successfulUpload ? previewCards : ''));
        if (this.error) {
            content = (h("div", { class: "upload_container" }, h("user-login", { database: database }), h("h3", { style: { "color": "red" } }, "Error"), h("p", null, this.error), this.validProps ? h("kclsu-button", { emitid: "clear", purple: true }, "Try again") : ''));
        }
        return content;
    }
};

export { CandidateUpload as candidate_upload };

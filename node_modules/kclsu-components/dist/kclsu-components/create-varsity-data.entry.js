import { r as registerInstance, h } from './index-65ac344c.js';

const createVarsityDataCss = ".button{display:table;padding:5px 20px;margin:15px 20px 10px;color:white;background:#14847e;border-radius:30px;font-size:18px;cursor:pointer;-webkit-box-shadow:4px 3px 9px -2px rgba(0, 0, 0, .3);-moz-box-shadow:4px 3px 9px -2px rgba(0, 0, 0, .3);box-shadow:4px 3px 9px -2px rgba(0, 0, 0, .3)}.container{min-width:50%;padding:1em;border:2px solid #14847e}.admin{max-width:90%;margin:2em auto;height:auto}";

const CreateVarsityData = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
    }
    componentDidLoad() {
        if (this.allowcreate) {
            let url = `https://www.kclsu.org/svc/feeds/events/6013?subtree=true&types=varsity&from=${this.year}-2-1`;
            fetch(url)
                .then(res => res.json())
                .then(data => {
                this.mslEventData = data;
            });
        }
        if (this.allowupdate) {
            let url;
            if (this.test)
                url = `https://varsity-db.firebaseio.com/test.json`;
            else
                url = `https://varsity-db.firebaseio.com/${this.year}.json`;
            fetch(url)
                .then(res => res.json())
                .then(data => {
                this.firebaseData = data;
            });
        }
    }
    closeModal(e) {
        console.log(e);
        this.uploadMessage = '';
        this.modalOpen = false;
    }
    createNewDatabase(e) {
        e.preventDefault();
        this.modalOpen = true;
        let alldata = [];
        for (let x = 0; x < this.mslEventData.length; x++) {
            this.mslEventData[x].score = [];
            alldata.push(this.mslEventData[x]);
        }
        this.postToDatabase(alldata);
    }
    updateDatabase(e) {
        e.preventDefault();
        this.modalOpen = true;
        let firebaseClone = [...this.firebaseData];
        let finalData = [];
        for (let x = 0; x < this.mslEventData.length; x++) {
            let currentMSL = this.mslEventData[x];
            let matchIndex = firebaseClone.findIndex(evt => evt.Id === currentMSL.Id);
            if (matchIndex && matchIndex >= 0) {
                let mslClone = Object.assign({}, currentMSL);
                if (firebaseClone[matchIndex].score) {
                    mslClone.score = firebaseClone[matchIndex].score;
                }
                finalData.push(mslClone);
            }
            else
                finalData.push(currentMSL);
        }
        this.postToDatabase(finalData);
    }
    postToDatabase(data) {
        let url;
        if (this.test)
            url = `https://varsity-db.firebaseio.com/test.json`;
        else
            url = `https://varsity-db.firebaseio.com/${this.year}.json`;
        let payload = {
            method: 'PUT',
            cache: 'no-cache',
            credentials: 'same-origin',
            headers: {
                'Content-Type': 'application/json'
                // 'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: JSON.stringify(data) // body data type must match "Content-Type" header
        };
        fetch(url, payload)
            .then(res => {
            if (res.ok)
                this.uploadMessage = `Successful upload!`;
            else
                this.uploadMessage = `Possible error. Contact the digital coordinator.`;
        })
            .catch(er => {
            this.uploadMessage = `Upload Failure.......... Error Response from server: ${er}........ Contact the digital coordinator.`;
        });
    }
    render() {
        let createButton = !this.mslEventData ? '' : h("a", { onClick: e => this.createNewDatabase(e), class: "button" }, "FETCH DATA");
        let updateButton = !this.firebaseData ? '' : h("a", { onClick: e => this.updateDatabase(e), class: "button" }, "UPDATE DATA");
        return (h("div", { class: "admin" }, h("flex-container", { alignx: "space-around" }, h("div", { class: 'container' }, h("h3", null, "FETCH Data From MSL Events Feed"), h("p", null, " This button will download a NEW set of data from MSL's Events data, and replace what is there before."), h("p", null, "BEWARE: Any existing data (such as varsity scores) will be replaced for the year specified in the component attribute."), createButton), h("div", { class: 'container' }, h("h3", null, "UPDATE Data with MSL Events Feed"), h("p", null, "This button will update the database. It will keep all existing scores. Any new events that have been added, or changes made to the events details in the MSL Events Admin, will be added to the database."), updateButton)), ",", h("kclsu-modal", { show: this.modalOpen }, h("h3", null, "Varsity database currently being updated...."), this.uploadMessage)));
    }
};
CreateVarsityData.style = createVarsityDataCss;

export { CreateVarsityData as create_varsity_data };
